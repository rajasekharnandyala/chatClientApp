{"version":3,"sources":["App.js","ChatItems.js","login.js","serviceWorker.js","index.js"],"names":["library","add","faTrash","React","Component","ChatItems","props","listItems","items","map","item","className","key","type","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","login","state","currentItems","handlechangetext","bind","addtext","this","setState","Date","now","preventDefault","newItem","newItems","filterItems","filter","id","onSubmit","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","path","exact","strict","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yVAMAA,IAAQC,IAAIC,KACqBC,IAAMC,U,oCCcxBC,MAhBf,SAAmBC,GACnB,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GACxB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAAK,2BAAG,2BAAOC,KAAK,OAAOC,MAAOJ,EAAKK,KAAMC,SAAU,SAACC,GAC3FX,EAAMY,UAAUD,EAAEE,OAAOL,MAAOJ,EAAKE,QADG,OAEpC,8BACR,kBAAC,IAAD,CAAiBD,UAAU,UAAUS,KAAK,QAAQC,QAAU,kBAAMf,EAAMgB,WAAWZ,EAAKE,cAG5F,OACC,6BACI,kBAAC,IAAD,CAAUW,SAAU,IAAKC,OAAO,eAAejB,KCX/BkB,G,wDACnB,WAAYnB,GAAQ,IAAD,8BAChB,cAAMA,IACDoB,MAAQ,CACTlB,MAAO,GACPmB,aAAc,CACXZ,KAAM,GACNH,IAAI,KAGX,EAAKgB,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKP,WAAa,EAAKA,WAAWO,KAAhB,gBAClB,EAAKX,UAAY,EAAKA,UAAUW,KAAf,gBAZD,E,6DAcFZ,GACfc,KAAKC,SAAS,CACVL,aAAc,CACVZ,KAAME,EAAEE,OAAOL,MACfF,IAAKqB,KAAKC,W,8BAIZjB,GACJA,EAAEkB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,aAC3B,GAAqB,KAAjBS,EAAQrB,KAAa,CACrB,IAAMsB,EAAQ,sBAAON,KAAKL,MAAMlB,OAAlB,CAAyB4B,IACvCL,KAAKC,SAAS,CACVxB,MAAO6B,EACPV,aAAa,CACTZ,KAAM,S,iCAKXH,GACT,IAAM0B,EAAcP,KAAKL,MAAMlB,MAAM+B,QAAO,SAAA7B,GAAI,OAC5CA,EAAKE,MAAQA,KACjBmB,KAAKC,SAAS,CACVxB,MAAO8B,M,gCAGHvB,EAAKH,GACX,IAAMJ,EAAQuB,KAAKL,MAAMlB,MACzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAQA,IAEZF,EAAKK,KAAOA,MAGlBgB,KAAKC,SAAS,CACVxB,MAAOA,M,+BAIf,OACE,yBAAKG,UAAU,QACX,gCACF,0BAAM6B,GAAG,aAAaC,SAAUV,KAAKD,SACjC,2BAAOjB,KAAK,OAAO6B,YAAY,aAAa5B,MAAOiB,KAAKL,MAAMC,aAAaZ,KAAMC,SAAUe,KAAKH,mBAChG,4BAAQf,KAAK,UAAb,SAGJ,kBAAC,EAAD,CAAWL,MAAOuB,KAAKL,MAAMlB,MAAOc,WAAYS,KAAKT,WAAYJ,UAAWa,KAAKb,iB,GAhEpDf,IAAMC,YCOrBuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACA,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOC,KAAK,GAAEC,OAAK,EAACC,QAAM,EAACC,UAAW7B,OAI1C8B,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.abe4a4d7.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter, Link} from 'react-router-dom';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faTrash);\nexport default class App extends React.Component {\n  constructor(props) {\n     super(props);\n     this.state = {\n       name: 'raj',\n       pass:'',\n       issubmit: false,\n     }\n     this.handlechangeName = this.handlechangeName.bind(this);\n     this.handlechangePassword = this.handlechangePassword.bind(this);\n     this.submit = this.submit.bind(this);\n  }\n handlechangeName (e) {\n  this.setState({\n    name: e.target.value\n  });\n}\nhandlechangePassword (e) {\n  this.setState({\n    pass: e.target.value\n  });\n}\n issubmit = false;\nsubmit() {\n\n}\nrender() {\n  return (\n<section className=\"container\">\n  <div className=\"box-container\">\n    <div className=\"controller\"> loging</div>\n    <input value={this.state.name} className=\"form\" placeholder=\"UserName\" type=\"text\" onChange={this.handlechangeName}/>\n    <input value={this.state.pass} className=\"form\" placeholder=\"PassWord\" type=\"password\" onChange={this.handlechangePassword}/>\n    <BrowserRouter>\n    <Link to='/login' color=\"white\"> Login</Link>\n    </BrowserRouter>\n    </div>\n</section>\n  );\n}\n}\n\n\n","import React from 'react';\r\nimport './ChatItems.css';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\nfunction ChatItems(props) {\r\nconst items = props.items;\r\nconst listItems = items.map(item=>{\r\n    return <div className=\"list\" key={item.key}><p><input type=\"text\" value={item.text} onChange={(e)=>{\r\n        props.setUpdate(e.target.value, item.key)\r\n    }}/>    <span>\r\n    <FontAwesomeIcon className=\"faicons\" icon=\"trash\" onClick= {() => props.deleteItem(item.key)}/></span></p>\r\n</div>\r\n}); \r\nreturn (\r\n <div>\r\n     <FlipMove duration={200} easing='ease-in-out'>{listItems}\r\n     </FlipMove>\r\n     </div>\r\n)\r\n}\r\nexport default ChatItems;","import React from 'react';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport ChatItems from './ChatItems';\r\nimport './login.css';\r\n// import {BrowserRouter, Link} from 'react-router-dom';\r\nexport default class login extends React.Component {\r\n  constructor(props) {\r\n     super(props);\r\n     this.state = {\r\n         items: [],\r\n         currentItems: {\r\n            text: '',\r\n            key:'',\r\n         }\r\n     }\r\n     this.handlechangetext = this.handlechangetext.bind(this);\r\n     this.addtext = this.addtext.bind(this);\r\n     this.deleteItem = this.deleteItem.bind(this);\r\n     this.setUpdate = this.setUpdate.bind(this);\r\n  }\r\n  handlechangetext(e) {\r\n    this.setState({\r\n        currentItems: {\r\n            text: e.target.value,\r\n            key: Date.now(),\r\n        }\r\n    });\r\n  }\r\n  addtext(e) {\r\n      e.preventDefault();\r\n      const newItem = this.state.currentItems;\r\n      if (newItem.text !== '') {\r\n          const newItems = [...this.state.items, newItem];\r\n          this.setState({\r\n              items: newItems,\r\n              currentItems:{\r\n                  text: '',\r\n                }\r\n         });\r\n      }\r\n  }\r\n  deleteItem(key) {\r\n    const filterItems = this.state.items.filter(item=>\r\n        item.key !== key);\r\n    this.setState({\r\n        items: filterItems,\r\n    })\r\n  }\r\n  setUpdate(text,key) {\r\n      const items = this.state.items;\r\n      items.map(item=>{\r\n        if(item.key === key)\r\n        {\r\n            item.text = text;\r\n        }\r\n      })\r\n      this.setState({\r\n          items: items\r\n      })\r\n  }\r\nrender() {\r\n  return (\r\n    <div className=\"chat\" >\r\n        <header>\r\n      <form id='to-do-form' onSubmit={this.addtext}>\r\n          <input type=\"text\" placeholder=\"Enter Text\" value={this.state.currentItems.text} onChange={this.handlechangetext}/>\r\n          <button type=\"submit\">Add</button>\r\n      </form>\r\n      </header>\r\n      <ChatItems items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate}/>\r\n      </div>\r\n  );\r\n}\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport login from './login';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <Switch>\n      {/* <Route path=\"/\" exact strict component={App}></Route> */}\n      <Route path=\"\"exact strict component={login}></Route>\n    </Switch>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}